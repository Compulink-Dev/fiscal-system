generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Company {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  deviceId  String
  name      String
  tradeName String
  tin       String @unique
  vatNumber String @unique

  address           Address
  contacts          Contacts
  primaryContact    PrimaryContact
  authorizedPersons AuthorizedPerson[]

  station            String
  accountingSystem   String
  operatingMode      OperatingMode @default(Online)
  vatCertificatePath String?

  // Relations - Add NoAction to break cycle
  createdBy   User      @relation("CompanyCreatedBy", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdById String    @db.ObjectId
  users       User[]    @relation("CompanyUsers")
  invoices    Invoice[]

  createdAt DateTime @default(now())
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String         @unique
  password              String
  company               Company?       @relation("CompanyUsers", fields: [companyId], references: [id])
  companyId             String?        @db.ObjectId
  createdCompanies      Company[]      @relation("CompanyCreatedBy")
  role                  String         @default("user")
  createdAt             DateTime       @default(now())
  hasActiveSubscription Boolean        @default(false)
  subscriptions         Subscription[]
  UserSession           UserSession[]
}

model Invoice {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  company                  Company   @relation(fields: [companyId], references: [id])
  companyId                String    @db.ObjectId
  receiptType              String // FiscalInvoice, CreditNote, DebitNote
  receiptCurrency          String
  receiptCounter           Int
  receiptGlobalNo          Int
  invoiceNo                String
  buyerData                Json
  receiptNotes             String?
  receiptDate              DateTime
  creditDebitNote          Json?
  receiptLinesTaxInclusive Boolean
  receiptLines             Json
  receiptTaxes             Json
  receiptPayments          Json
  receiptTotal             Float
  receiptPrintForm         String?   @default("Receipt48")
  receiptDeviceSignature   Json?
  receiptServerSignature   Json?
  receiptID                String?
  serverDate               DateTime?
  status                   String    @default("draft")
  validationErrors         String[]
  fiscalDayNo              Int?
  createdAt                DateTime  @default(now())

  @@index([companyId])
  @@index([invoiceNo])
  @@index([receiptDate])
}

model Subscription {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  user      User               @relation(fields: [userId], references: [id])
  userId    String             @db.ObjectId
  status    SubscriptionStatus @default(Active)
  plan      String
  expiresAt DateTime
  createdAt DateTime           @default(now())

  @@index([userId])
}

model UserSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  sessionId String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

// Enum for operating mode
enum OperatingMode {
  Online
  Offline
}

// Nested type definitions (without @unique)
type Address {
  street   String
  houseNo  String
  city     String
  province String
}

type Contacts {
  phoneNo String
  email   String // Removed @unique
  mobile  String
}

type PrimaryContact {
  name String
}

type AuthorizedPerson {
  name        String
  designation String
  signature   String
  date        String
}

enum SubscriptionStatus {
  Active
  Inactive
  Canceled
  PendingPayment
}
